name: Trigger Autograding

'on':
  push:
    paths:
      - 'student_assignment.py'
  # workflow_dispatch:
  #   inputs:
  #     hw03_q1_results:
  #       description: "Results of question 1"
  #       required: true
  #     hw03_q2_results:
  #       description: "Results of question 2"
  #       required: true
  #     hw03_q3_results:
  #       description: "Results of question 3"
  #       required: true

jobs:
  trigger-autograding:
    # if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      # - name: Fetch Classroom ID
      #   run: |
      #     CLASSROOM_ID=$(curl -s -H "Authorization: token ${{ secrets.ORG_PAT_TOKEN_2 }}" \
      #                      -H "Accept: application/vnd.github.v3+json" \
      #                      https://api.github.com/classrooms | jq -r '.[1].id')
      #     echo "CLASSROOM_ID=$CLASSROOM_ID" >> $GITHUB_ENV

      # - name: Fetch Assignment Info
      #   run: |
      #     # Fetch all assignments
      #     ASSIGNMENT_INFO=$(curl -s -H "Authorization: token ${{ secrets.ORG_PAT_TOKEN_2 }}" \
      #                           -H "Accept: application/vnd.github.v3+json" \
      #                           https://api.github.com/classrooms/${{ env.CLASSROOM_ID }}/assignments)
      
      #     # Ensure it's valid JSON
      #     if ! echo "$ASSIGNMENT_INFO" | jq -e . >/dev/null 2>&1; then
      #       echo "Error: API returned invalid JSON"
      #       exit 1
      #     fi
      
      #     # Extract assignment info
      #     ASSIGNMENT_ID=$(echo "$ASSIGNMENT_INFO" | jq -r '.[] | select(.slug=="rag3-demo") | .id')
      #     ASSIGNMENT_NAME=$(echo "$ASSIGNMENT_INFO" | jq -r '.[] | select(.slug=="rag3-demo") | .title')
      
      #     # Validate extraction
      #     if [[ -z "$ASSIGNMENT_ID" || -z "$ASSIGNMENT_NAME" || "$ASSIGNMENT_ID" == "null" ]]; then
      #       echo "Error: Failed to fetch assignment details."
      #       exit 1
      #     fi
      
      #     # Save values
      #     echo "ASSIGNMENT_ID=$ASSIGNMENT_ID" >> $GITHUB_ENV
      #     echo "assignment_name=$ASSIGNMENT_NAME" >> $GITHUB_ENV

      # - name: Fetch Roster Identifier & Submission Timestamp
      #   run: |
      #     # Fetch student grades for the assignment
      #     GRADES_JSON=$(curl -s -H "Authorization: token ${{ secrets.ORG_PAT_TOKEN_2 }}" \
      #                         -H "Accept: application/vnd.github.v3+json" \
      #                         "https://api.github.com/assignments/${{ env.ASSIGNMENT_ID }}/grades")
      #     echo "Raw API Response:"
      #     echo "$GRADES_JSON"
      
      #     # Ensure valid JSON response
      #     if ! echo "$GRADES_JSON" | jq -e . >/dev/null 2>&1; then
      #       echo "Error: API returned invalid JSON for grades"
      #       exit 1
      #     fi
      
      #     # Extract roster identifier and submission timestamp based on the matching GitHub username
      #     ROSTER_IDENTIFIER=$(echo "$GRADES_JSON" | jq -r '.[] | select(.github_username=="${{ github.actor }}") | .roster_identifier')
      #     SUBMISSION_TIMESTAMP=$(echo "$GRADES_JSON" | jq -r '.[] | select(.github_username=="${{ github.actor }}") | .submission_timestamp')

      #     # If roster_identifier is empty, set it to "Not Set"
      #     if [[ -z "$ROSTER_IDENTIFIER" || "$ROSTER_IDENTIFIER" == "null" ]]; then
      #       ROSTER_IDENTIFIER="Not Set"
      #     fi
      
      #     if [[ -z "$SUBMISSION_TIMESTAMP" || "$SUBMISSION_TIMESTAMP" == "null" ]]; then
      #       echo "Warning: No submission timestamp found for user ${{ github.actor }}"
      #       SUBMISSION_TIMESTAMP="Empty"
      #     fi
      
      #     # Save to environment variables
      #     echo "roster_identifier=$ROSTER_IDENTIFIER" >> $GITHUB_ENV
      #     echo "submission_timestamp=$SUBMISSION_TIMESTAMP" >> $GITHUB_ENV
      
      #     # Output for debugging
      #     echo "Roster Identifier: $ROSTER_IDENTIFIER"
      #     echo "Submission Timestamp: $SUBMISSION_TIMESTAMP"
      #   shell: bash

      # - name: Trigger Private Autograder
      #   run: |
      #     curl -X POST -H "Authorization: token ${{ secrets.ORG_PAT_TOKEN }}" \
      #          -H "Accept: application/vnd.github.v3+json" \
      #          https://api.github.com/repos/IcensRAGHomework/hw03-autograder/actions/workflows/autograde.yml/dispatches \
      #          -d '{
      #            "ref": "main",
      #            "inputs": {
      #              "student_repo": "${{ github.repository }}",
      #              "commit_sha": "${{ github.sha }}",
      #              "assignment_name": "${{ env.assignment_name }}", 
      #              "github_username": "${{ github.actor }}",
      #              "roster_identifier": "${{ env.roster_identifier }}",
      #              "student_repository_url": "https://github.com/${{ github.repository }}",
      #              "submission_timestamp": "${{ env.submission_timestamp }}"
      #            }
      #          }'

      - name: Trigger Private Autograder
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.ORG_PAT_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/IcensRAGHomework/hw03-demo-autograder/actions/workflows/autograde.yml/dispatches \
               -d '{
                 "ref": "main",
                 "inputs": {
                   "student_repo": "${{ github.repository }}",
                   "commit_sha": "${{ github.sha }}"
                 }
               }'

      - name: Wait for Results
        run: |
          RESULTS_FILE="grading_results.txt"
          # echo "" > "$RESULTS_FILE"  # Ensure fresh results
      
          while [[ ! -s "$RESULTS_FILE" ]]; do
            echo "Waiting for grading to complete..."
            sleep 30

            ARTIFACT_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" \
              | jq -r '.artifacts[] | select(.name=="grading-results") | .archive_download_url' | head -n 1)

            if [[ -z "$ARTIFACT_URL" ]]; then
              echo "No artifact found!"
              exit 1
            fi
            echo "ARTIFACT_URL=$ARTIFACT_URL" >> $GITHUB_ENV

            curl -L -o grading-results.zip -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "$ARTIFACT_URL"
            unzip grading-results.zip
          done
      
          echo "Grading completed. Results:"
          cat "$RESULTS_FILE"

      - name: Get result of question 1
        id: Hw03_Q1
        run: |
          HW03_Q1_RESULTS=$(grep 'HW03_Q1_RESULTS' grading_results.txt | cut -d ':' -f2 | xargs)
          echo "HW03_Q1_RESULTS=${HW03_Q1_RESULTS:-0}" >> $GITHUB_ENV
      
      - name: Get result of question 2
        id: Hw03_Q2
        run: |
          HW03_Q2_RESULTS=$(grep 'HW03_Q2_RESULTS' grading_results.txt | cut -d ':' -f2 | xargs)
          echo "HW03_Q2_RESULTS=${HW03_Q2_RESULTS:-0}" >> $GITHUB_ENV

      - name: Get result of question 3
        id: Hw03_Q3
        run: |
          HW03_Q3_RESULTS=$(grep 'HW03_Q3_RESULTS' grading_results.txt | cut -d ':' -f2 | xargs)
          echo "HW03_Q3_RESULTS=${HW03_Q3_RESULTS:-0}" >> $GITHUB_ENV

      - name: Debug Receive Results
        run: |
          echo "Receive Q1 Result: $HW03_Q1_RESULTS"
          echo "Receive Q2 Result: $HW03_Q2_RESULTS"
          echo "Receive Q3 Result: $HW03_Q3_RESULTS"

      # Aggregate autograding results
      - name: Report autograding results
        id: grading_report
        uses: classroom-resources/autograding-grading-reporter@v1
        env:
          HW03_Q1_RESULTS: "${{ env.HW03_Q1_RESULTS }}"
          HW03_Q2_RESULTS: "${{ env.HW03_Q2_RESULTS }}"
          HW03_Q3_RESULTS: "${{ env.HW03_Q3_RESULTS }}"
        with:
          runners: Hw03_Q1,Hw03_Q2,Hw03_Q3

  # process-result:
  #   if: github.event_name == 'workflow_dispatch'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Save Grading Results
  #       run: |
  #         echo "HW03_Q1_RESULTS:${{ github.event.inputs.hw03_q1_results }}" > grading_results.txt
  #         echo "HW03_Q2_RESULTS:${{ github.event.inputs.hw03_q2_results }}" >> grading_results.txt
  #         echo "HW03_Q3_RESULTS:${{ github.event.inputs.hw03_q3_results }}" >> grading_results.txt

  #     - name: Upload Grading Results as Artifact
  #       id: upload
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: grading-results
  #         path: grading_results.txt
  #         retention-days: 1

  #     - name: Get Artifact Info
  #       run: |
  #         echo "ARTIFACT_NAME=grading-results" >> $GITHUB_ENV

  #     - name: Get result of question 1
  #       id: Hw03_Q1
  #       run: |
  #         HW03_Q1_RESULTS="${{ github.event.inputs.hw03_q1_results }}"
  #         echo "HW03_Q1_RESULTS=${HW03_Q1_RESULTS:-0}" >> $GITHUB_ENV
      
  #     - name: Get result of question 2
  #       id: Hw03_Q2
  #       run: |
  #         HW03_Q2_RESULTS="${{ github.event.inputs.hw03_q2_results }}"
  #         echo "HW03_Q2_RESULTS=${HW03_Q2_RESULTS:-0}" >> $GITHUB_ENV

  #     - name: Get result of question 3
  #       id: Hw03_Q3
  #       run: |
  #         HW03_Q3_RESULTS="${{ github.event.inputs.hw03_q3_results }}"
  #         echo "HW03_Q3_RESULTS=${HW03_Q3_RESULTS:-0}" >> $GITHUB_ENV

  #     - name: Debug Receive Results
  #       run: |
  #         echo "Receive Q1 Result: $HW03_Q1_RESULTS"
  #         echo "Receive Q2 Result: $HW03_Q2_RESULTS"
  #         echo "Receive Q3 Result: $HW03_Q3_RESULTS"

  #     # Aggregate autograding results
  #     - name: Report autograding results
  #       id: grading_report
  #       uses: classroom-resources/autograding-grading-reporter@v1
  #       env:
  #         HW03_Q1_RESULTS: "${{ env.HW03_Q1_RESULTS }}"
  #         HW03_Q2_RESULTS: "${{ env.HW03_Q2_RESULTS }}"
  #         HW03_Q3_RESULTS: "${{ env.HW03_Q3_RESULTS }}"
  #       with:
  #         runners: Hw03_Q1,Hw03_Q2,Hw03_Q3
